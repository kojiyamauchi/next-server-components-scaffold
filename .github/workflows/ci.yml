name: CI
on:
  pull_request:
    branches: main

env:
  NODE_VERSION: 22.*
  YARN_VERSION: 4.6.0
  LAUNCH_CSPELL: on # Launch CSpell. [ on, off ]
  LAUNCH_ESLINT: on # Launch ESLint. [ on, off ]
  LAUNCH_TYPECHECK: on # Launch tsc. [ on, off ]
  LAUNCH_JEST: on # Launch Jest. [ on, off ]
  LAUNCH_BUILD: on # Launch Build. [ on, off ]
  LAUNCH_DEPLOY: on # Launch Deploy. [ on, off ]

jobs:
  setup:
    name: Setup Module
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Execution Environment for Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Cache Node Modules
        id: node_modules_cache_id
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
          restore-keys: |
            ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-
      - name: Set Yarn Version
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}
      - name: Install Dependencies
        run: yarn

  cspell:
    name: CSpell
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Execution Environment for Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set Yarn Version
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}
      - name: Restore Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: Do CSpell
        if: env.LAUNCH_CSPELL == 'on'
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn cspell --dot --no-must-find-files "**/*" \
          | reviewdog -level=warning -efm="%f:%l:%c - %m" -reporter=github-pr-review
      - name: Displayed CSpell Failure on Checks
        if: env.LAUNCH_CSPELL == 'on'
        run: yarn cspell --dot --no-must-find-files "**/*"

  eslint:
    name: ESlint
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Execution Environment for Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set Yarn Version
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}
      - name: Restore Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
      - name: Do ESLint
        if: env.LAUNCH_ESLINT == 'on'
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: './**/*.{ts,mjs,js}'
      - name: Displayed ESLINT Failure on Checks
        if: env.LAUNCH_ESLINT == 'on'
        run: yarn lint

  typecheck:
    name: Type Check
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Execution Environment for Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set Yarn Version
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}
      - name: Restore Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
      - name: Prisma Generate
        if: env.LAUNCH_TYPECHECK == 'on'
        run: yarn prisma:generate
      # Currently, tsc && reviewdog is will not display properly in conversation review.
      - name: Do Type Check
        if: env.LAUNCH_TYPECHECK == 'on'
        uses: EPMatt/reviewdog-action-tsc@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          level: warning
          fail_on_error: true
          filter_mode: nofilter
      # - name: Displayed Tsc Failure on Checks
      #   if: env.LAUNCH_TYPECHECK == 'on'
      #   run: yarn typecheck:apps

  jest:
    name: Jest
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Execution Environment for Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set Yarn Version
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}
      - name: Restore Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
      - name: Set Env
        run: |
          if find src -type f \( -name "*.test.ts" -o -name "*.test.js" \) | grep -q .;
          then
              echo "FILE_EXISTS=on" >> $GITHUB_ENV
          else
              echo "FILE_EXISTS=off" >> $GITHUB_ENV
          fi
        shell: bash
      #- name: Run Prisma Migrations
      #  if: env.LAUNCH_JEST == 'on'
      #  run: yarn prisma:migrate:dev --name test-migration
      #  env:
      #    DATABASE_URL: mysql://root:root@localhost:3306/example
      - name: Prisma Generate
        if: env.LAUNCH_JEST == 'on'
        run: yarn prisma:generate
      - name: Do Jest Apps
        if: env.LAUNCH_JEST == 'on' && env.FILE_EXISTS == 'on'
        run: yarn jest
        #env:
        #  DATABASE_URL: mysql://root:root@localhost:3306/example

  build:
    name: Build Test
    needs:
      - setup
      - cspell
      - eslint
      - typecheck
      - jest
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: 'postgres://test:test@localhost:5432/test'
      DIRECT_URL: 'postgres://test:test@localhost:5432/test'
      NEXT_PUBLIC_SUPABASE_ANON_KEY: 'dummy-anon-key'
      NEXT_PUBLIC_SUPABASE_URL: 'http://localhost:54321'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Execution Environment for Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set Yarn Version
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}
      - name: Restore Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
      - name: Prisma Migrations
        if: env.LAUNCH_BUILD == 'on'
        run: yarn prisma:migrate:deploy
        env:
          DATABASE_URL: 'postgres://test:test@localhost:5432/test'
      - name: Prisma Generate
        if: env.LAUNCH_BUILD == 'on'
        run: yarn prisma:generate
      - name: Do Build Test
        if: env.LAUNCH_BUILD == 'on'
        run: yarn build

  deploy-preview:
    name: Deploy Vercel Preview
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Execution Environment for Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set Yarn Version
        run: |
          corepack enable
          yarn set version ${{ env.YARN_VERSION }}
      - name: Restore Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-v${{ env.NODE_VERSION }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}
      - name: Install Vercel CLI
        run: yarn dlx vercel@latest

      - name: Pull Vercel Environment Information
        run: yarn dlx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Set Vercel Environment Variables
        run: |
          vercel env rm DATABASE_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm DIRECT_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm NEXT_PUBLIC_SUPABASE_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm NEXT_PUBLIC_SUPABASE_ANON_KEY preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          echo "${{ secrets.PREVIEW_DATABASE_URL }}" | vercel env add DATABASE_URL preview --token=${{ secrets.VERCEL_TOKEN }}
          echo "${{ secrets.PREVIEW_DIRECT_URL }}" | vercel env add DIRECT_URL preview --token=${{ secrets.VERCEL_TOKEN }}
          echo "${{ secrets.PREVIEW_NEXT_PUBLIC_SUPABASE_URL }}" | vercel env add NEXT_PUBLIC_SUPABASE_URL preview --token=${{ secrets.VERCEL_TOKEN }}
          echo "${{ secrets.PREVIEW_NEXT_PUBLIC_SUPABASE_ANON_KEY }}" | vercel env add NEXT_PUBLIC_SUPABASE_ANON_KEY preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Verify Vercel Environment Variables
        run: |
          echo "Listing Vercel environment variables:"
          vercel env ls preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run Prisma Migrations
        run: yarn prisma:migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.PREVIEW_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PREVIEW_DIRECT_URL }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEBUG_MESSAGE: ${{ secrets.PREVIEW_DEBUG_MESSAGE }}
          DATABASE_URL: ${{ secrets.PREVIEW_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PREVIEW_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PREVIEW_NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PREVIEW_NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          DEBUG_MESSAGE: ${{ secrets.PREVIEW_DEBUG_MESSAGE }}
          DATABASE_URL: ${{ secrets.PREVIEW_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PREVIEW_DIRECT_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.PREVIEW_NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PREVIEW_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
